#include <bits/stdc++.h>
using namespace std;
void buildtree(int *tree,int a[],int index,int s,int e ){
     if(s>e)return;
    if(s==e){tree[index]=a[s];
    return;}
    int mid=(e+s)/2;
    buildtree(tree,a,2*index,s,mid);
    buildtree(tree,a,2*index+1,mid+1,e);
    
    int left=tree[2*index];
    int right=tree[2*index+1];
    
    tree[index]=min(left,right); 
}
int query(int *tree,int index,int s,int e,int l,int r){
    if(r<s || e<l)return INT_MAX;
    if(l<=s && e<=r)return tree[index];
    int mid=(s+e)/2;
    int p1=query(tree,2*index,s,mid,l,r);
   int p2= query(tree,2*index+1,mid+1,e,l,r);
    return min(p1,p2);
}
int main() {
    int t;cin>>t;while(t--){
    int n;
    cin>>n;
    int a[999999];
    for(int i=0;i<n;i++)cin>>a[i];
    
    int  *tree=new int[4*n+1];
	buildtree(tree,a,1,0,n-1);
	int q;cin>>q;
	for(int i=0;i<q;i++){
	    int x,y;cin>>x>>y;
	   cout<<query(tree,1,0,n-1,x,y)<<" ";
	}
	cout<<endl;
    }
	return 0;
}
